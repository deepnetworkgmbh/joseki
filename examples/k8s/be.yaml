apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: joseki
  labels:
    app: joseki-backend
    version: '#{be.imageTag}#'
data:
  config.yaml: |-
    database:
      connectionString: #{be.sqlConnectionString}#
    
    cache:
      polarisCheckTtl: 7
      azureCheckTtl: 7
      cveTtl: 7
      defaultTtl: 7
      imageScanTtl: 12
    
    watchmen:
      scannerContainersPeriodicitySeconds: 1800
      archiverPeriodicityHours: 24
      archiveTtlDays: 90
      infraScorePeriodicityHours: 12
    
    azureBlob:
      basePath: https://#{be.storageAccountName}#.blob.core.windows.net
      sas: #{be.blobSas}#
      connectionString: DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net
      accountName: #{be.storageAccountName}#
      accountKey: #{be.storageAccountKey}#
    
    azureQueue:
      connectionString: DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net
      imageScanRequestsQueue: image-scan-requests
      accountName: #{be.storageAccountName}#
      accountKey: #{be.storageAccountKey}#

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: joseki-be
  namespace: joseki
  labels:
    app: joseki-backend

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: joseki-be
  labels:
    app: joseki-backend
rules:

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: joseki-be
  labels:
    app: joseki-backend
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: joseki-be
subjects:
  - kind: ServiceAccount
    name: joseki-be
    namespace: joseki

---
apiVersion: v1
kind: Service
metadata:
  name: joseki-be
  namespace: joseki
  labels:
    app: joseki-backend
  annotations:
spec:
  ports:
  - name: joseki-be
    port: 80
    protocol: TCP
    targetPort: main-http
  selector:
    app: joseki-backend
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: joseki-be
  namespace: joseki
  labels:
    app: joseki-backend 
    version: '#{be.imageTag}#'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: joseki-backend
  template:
    metadata:
      labels:
        app: joseki-backend
    spec:
      containers:
      - name: joseki-be
        image: 'deepnetwork/joseki-backend:#{be.imageTag}#'
        imagePullPolicy: 'Always'
        name: joseki-be
        ports:
        - name: main-http
          containerPort: 8080
        resources:
          requests:
            memory: "200M"
            cpu: "500m"
          limits:
            memory: "500M"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /health/readiness
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
          - name: backend-config-volume
            mountPath: /app/config.yaml
            subPath: config.yaml
        securityContext:
          runAsUser: 10001
          runAsGroup: 10001
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          readOnlyRootFilesystem: false
        env:
          - name: JOSEKI_CONFIG_FILE_PATH
            value: "/app/config.yaml"
      serviceAccountName: joseki-be
      securityContext:
        fsGroup: 10001
      volumes:
        - name: backend-config-volume
          configMap:
            name: backend-config
            defaultMode: 0777
            items:
              - key: config.yaml
                path: config.yaml