name: scanner_trivy_ci_master

on: 
  push:
    branches:
    - master
    paths:
      - '.github/workflows/scanner_trivy_master.yml'
      - 'src/scanners/trivy/**'
      - '!src/scanners/trivy/*.md'

jobs:
  build-n-push:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.3

    - name: Set env vars
      run: |
        echo "SERVICE_ROOT=src/scanners/trivy/" >> $GITHUB_ENV
        echo "DOCKERFILE_PATH=src/scanners/trivy/dockerfile" >> $GITHUB_ENV

        docker_repository="deepnetwork/joseki-scanner-trivy"
        echo "DOCKER_REPOSITORY=$docker_repository" >> $GITHUB_ENV

        version=$(cat src/scanners/trivy/version)
        SHA8=$(echo $GITHUB_SHA | cut -c1-8)
        tag_dev="$version-sha-$SHA8"
        echo "VERSION_TAG=$version" >> $GITHUB_ENV
        echo "DEV_TAG=$tag_dev" >> $GITHUB_ENV

        tests_tag="$docker_repository:$tag_dev.tests"
        tests_dir="$HOME/trivy_testresults"
        echo "TESTS_TAG=$tests_tag" >> $GITHUB_ENV
        echo "TESTS_DIR=$tests_dir" >> $GITHUB_ENV

    - name: lint dockerfile
      uses: brpaz/hadolint-action@v1.1.0
      with:
        dockerfile: ${{ env.DOCKERFILE_PATH }}

    - name: run unit-tests
      run: |
        docker build -t ${{ env.TESTS_TAG }} -f ${{ env.DOCKERFILE_PATH }} --target testrunner ${{ env.SERVICE_ROOT }}
        sudo mkdir -p ${{ env.TESTS_DIR }}
        docker run --rm --mount type=bind,source=${{ env.TESTS_DIR }},target=/app/testresults ${{ env.TESTS_TAG }}

    - name: publish test results
      uses: actions/upload-artifact@v2.2.0
      with:
        name: test_results
        path: '${{ env.TESTS_DIR }}/test_results.xml'

    - name: build dockerimage
      uses: docker/build-push-action@v1.1.0
      with:
        path: ${{ env.SERVICE_ROOT }}
        dockerfile: ${{ env.DOCKERFILE_PATH }}
        target: webapp
        repository: ${{ env.DOCKER_REPOSITORY }}
        tags: ${{ env.VERSION_TAG }}, ${{ env.DEV_TAG }}, edge
        add_git_labels: true
        push: false

    - name: scan image for CVEs
      uses: 'docker://aquasec/trivy:0.9.1'
      with:
        args: --exit-code 1 --severity HIGH,CRITICAL "${{ env.DOCKER_REPOSITORY }}:${{ env.DEV_TAG }}"

    - name: Docker Login
      uses: Azure/docker-login@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: push dockerimage
      run: |
        docker push "${{ env.DOCKER_REPOSITORY }}:${{ env.DEV_TAG }}"
        docker push "${{ env.DOCKER_REPOSITORY }}:${{ env.VERSION_TAG }}"
        docker push "${{ env.DOCKER_REPOSITORY }}:edge"

    - name: deploy to k8s
      env:
        IMAGE_TAG: ${{ env.DEV_TAG }}
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        TRIVY_CONFIG_DATA: ${{ secrets.TRIVY_CONFIG_DATA }}
      run: |
        echo "$KUBE_CONFIG_DATA" | base64 --decode > /tmp/config
        export KUBECONFIG=/tmp/config

        CONFIG_PATH=examples/k8s/trivy/scanner-trivy-config.yaml
        echo "$TRIVY_CONFIG_DATA" | base64 --decode > $CONFIG_PATH

        sed -i 's|#{trivy.imageTag}#|'"$IMAGE_TAG"'|' examples/k8s/trivy/kustomization.yaml
        sed -i 's|#{trivy.imageTag}#|'"$IMAGE_TAG"'|' examples/k8s/trivy/scanner-trivy.yaml

        kubectl apply -f examples/k8s/trivy/rbac.yaml
        kubectl apply -k examples/k8s/trivy

        rm $CONFIG_PATH /tmp/config
