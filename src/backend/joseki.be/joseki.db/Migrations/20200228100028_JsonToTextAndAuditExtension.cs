// <auto-generated />
using Microsoft.EntityFrameworkCore.Migrations;

namespace joseki.db.Migrations
{
#pragma warning disable 1591
    public partial class JsonToTextAndAuditExtension : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "JSON",
                table: "MetadataKube",
                type: "text",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "nvarchar(max)");

            migrationBuilder.AlterColumn<string>(
                name: "JSON",
                table: "MetadataAzure",
                type: "text",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "nvarchar(max)");

            migrationBuilder.AddColumn<string>(
                name: "ComponentId",
                table: "Audit",
                nullable: false,
                defaultValue: "undefined-id");

            migrationBuilder.AddColumn<string>(
                name: "ComponentName",
                table: "Audit",
                nullable: false,
                defaultValue: "undefined-name");

            migrationBuilder.CreateIndex(
                name: "IX_CheckResult_CheckId",
                table: "CheckResult",
                column: "CheckId");

            migrationBuilder.AddForeignKey(
                name: "FK_CheckResult_Check_CheckId",
                table: "CheckResult",
                column: "CheckId",
                principalTable: "Check",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            // update existing records based on json data
            migrationBuilder.Sql(
            @"
            UPDATE [dbo].[Audit]
            SET 
                [dbo].[Audit].[ComponentId] = '/subscriptions/' + JSON_VALUE(cast([dbo].[MetadataAzure].[JSON] as nvarchar(max)), '$.subscription.id') ,
                [dbo].[Audit].[ComponentName] = JSON_VALUE(cast([dbo].[MetadataAzure].[JSON] as nvarchar(max)), '$.subscription.name')  
            FROM 
                [dbo].[Audit]
                INNER JOIN [dbo].[MetadataAzure] on [dbo].[MetadataAzure].[AuditId] = [dbo].[Audit].Id
            WHERE [dbo].[Audit].[ComponentId] = 'undefined-id'
            ");

            migrationBuilder.Sql(
            @"
            UPDATE [dbo].[Audit]
            SET 
                [dbo].[Audit].[ComponentId] = '/k8s/' + JSON_VALUE(CAST([dbo].[MetadataKube].[JSON] as NVARCHAR(MAX)), '$.scanner.id') ,
                [dbo].[Audit].[ComponentName] = JSON_VALUE(CAST([dbo].[MetadataKube].[JSON] as NVARCHAR(MAX)), '$.cluster.SourceName')  
            FROM 
                [dbo].[Audit]
                INNER JOIN [dbo].[MetadataKube] on [dbo].[MetadataKube].[AuditId] = [dbo].[Audit].Id
            WHERE [dbo].[Audit].[ComponentId] = 'undefined-id'
            ");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_CheckResult_Check_CheckId",
                table: "CheckResult");

            migrationBuilder.DropIndex(
                name: "IX_CheckResult_CheckId",
                table: "CheckResult");

            migrationBuilder.DropColumn(
                name: "ComponentId",
                table: "Audit");

            migrationBuilder.DropColumn(
                name: "ComponentName",
                table: "Audit");

            migrationBuilder.AlterColumn<string>(
                name: "JSON",
                table: "MetadataKube",
                type: "nvarchar(max)",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "text");

            migrationBuilder.AlterColumn<string>(
                name: "JSON",
                table: "MetadataAzure",
                type: "nvarchar(max)",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "text");
        }
    }
#pragma warning restore 1591
}
