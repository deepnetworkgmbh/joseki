<?xml version="1.0"?>
<doc>
    <assembly>
        <name>webapp</name>
    </assembly>
    <members>
        <member name="T:webapp.BackgroundWorkers.TrivyDbUpdater">
            <summary>
            Updates Trivy database every hour.
            </summary>
        </member>
        <member name="M:webapp.BackgroundWorkers.TrivyDbUpdater.#ctor(core.scanners.IScanner)">
            <summary>
            Initializes a new instance of the <see cref="T:webapp.BackgroundWorkers.TrivyDbUpdater"/> class.
            </summary>
            <param name="scanner">Scanner instance.</param>
        </member>
        <member name="M:webapp.BackgroundWorkers.TrivyDbUpdater.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:webapp.BackgroundWorkers.TrivyDbUpdater.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:webapp.Configuration.ConfigurationParser">
            <summary>
            Parse YAML based application configuration.
            </summary>
        </member>
        <member name="M:webapp.Configuration.ConfigurationParser.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:webapp.Configuration.ConfigurationParser"/> class.
            </summary>
            <param name="configuration">The application configuration object.</param>
        </member>
        <member name="M:webapp.Configuration.ConfigurationParser.Parse(System.String)">
            <summary>
            Parse the string into dotnet object.
            </summary>
            <param name="input">String representation of YAML file.</param>
            <returns>The application configuration object.</returns>
        </member>
        <member name="M:webapp.Configuration.ConfigurationParser.Get">
            <summary>
            Parses Scanner Config on the first request and cache the result in memory.
            </summary>
            <returns>Image Scanner configuration object.</returns>
        </member>
        <member name="T:webapp.Configuration.FileExporterConfiguration">
            <summary>
            Represents File Exporter configuration.
            </summary>
        </member>
        <member name="P:webapp.Configuration.FileExporterConfiguration.Path">
            <summary>
            Path to the folder with Scan Results.
            </summary>
        </member>
        <member name="T:webapp.Configuration.ImageScannerConfiguration">
            <summary>
            The application configuration.
            </summary>
        </member>
        <member name="P:webapp.Configuration.ImageScannerConfiguration.Scanner">
            <summary>
            The scanner configuration.
            </summary>
        </member>
        <member name="P:webapp.Configuration.ImageScannerConfiguration.Exporter">
            <summary>
            The Scan Result exporter configuration.
            </summary>
        </member>
        <member name="T:webapp.Configuration.IScannerConfiguration">
            <summary>
            The base interface for all types of scanners configuration.
            </summary>
        </member>
        <member name="T:webapp.Configuration.IExporterConfiguration">
            <summary>
            The base interface for all types of exporters configuration.
            </summary>
        </member>
        <member name="T:webapp.Configuration.TrivyConfiguration">
            <summary>
            Trivy scanner configuration.
            </summary>
        </member>
        <member name="P:webapp.Configuration.TrivyConfiguration.BinaryPath">
            <summary>
            The address of trivy binary.
            </summary>
        </member>
        <member name="P:webapp.Configuration.TrivyConfiguration.CachePath">
            <summary>
            Trivy cache location.
            </summary>
        </member>
        <member name="P:webapp.Configuration.TrivyConfiguration.Registries">
            <summary>
            Array of Container Registry credentials.
            </summary>
        </member>
        <member name="T:webapp.Controllers.ScanController">
            <summary>
            Triggers new image scans.
            </summary>
        </member>
        <member name="M:webapp.Controllers.ScanController.#ctor(core.ImageScanner)">
            <summary>
            Initializes a new instance of the <see cref="T:webapp.Controllers.ScanController"/> class.
            </summary>
        </member>
        <member name="M:webapp.Controllers.ScanController.ScanImages(System.String)">
            <summary>
            Scan the image specified in a request body.
            </summary>
            <param name="imageTag">The image tag to scan.</param>
            <returns>Acknowledgement.</returns>
        </member>
        <member name="T:webapp.ImageScannerFactory">
            <summary>
            Helps instantiating correct Scanner, Exporter and Importer implementations based on the application configuration.
            </summary>
        </member>
        <member name="M:webapp.ImageScannerFactory.#ctor(webapp.Configuration.ConfigurationParser)">
            <summary>
            Initializes a new instance of the <see cref="T:webapp.ImageScannerFactory"/> class.
            </summary>
            <param name="configuration">the application configuration.</param>
        </member>
        <member name="M:webapp.ImageScannerFactory.GetScanner">
            <summary>
            Gets scanner implementation.
            </summary>
            <returns>At the moment, only trivy is supported, so returns Trivy scanner object.</returns>
        </member>
        <member name="M:webapp.ImageScannerFactory.GetExporter">
            <summary>
            Gets exporter implementation.
            </summary>
            <returns>At the moment, only file is supported, so returns File Exporter object.</returns>
        </member>
        <member name="T:webapp.Infrastructure.HttpRequestLoggingMiddleware">
            <summary>
            Writes logs in common format for any incoming HTTP request.
            </summary>
        </member>
        <member name="M:webapp.Infrastructure.HttpRequestLoggingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:webapp.Infrastructure.HttpRequestLoggingMiddleware"/> class.
            </summary>
            <param name="next">Next <see cref="T:Microsoft.AspNetCore.Http.RequestDelegate"/> to execute. </param>
        </member>
        <member name="M:webapp.Infrastructure.HttpRequestLoggingMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Executes a middleware.
            </summary>
            <param name="httpContext">Current <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:webapp.Infrastructure.HttpRequestLoggingMiddleware.GetElapsedMilliseconds(System.Int64,System.Int64)">
            <summary>
            Get elapsed milliseconds based on elapsed ticks.
            </summary>
            <param name="start">Ticks on a start.</param>
            <param name="stop">Ticks in the end.</param>
            <returns>Elapsed milliseconds.</returns>
        </member>
        <member name="T:webapp.Infrastructure.StateManager">
            <summary>
            Keeps the state of Image Scanner service.
            </summary>
        </member>
        <member name="M:webapp.Infrastructure.StateManager.SetReady">
            <summary>
            switches the service into ready-to-receive-traffic state.
            </summary>
        </member>
        <member name="M:webapp.Infrastructure.StateManager.SetLive">
            <summary>
            Switches the service into Live state.
            </summary>
        </member>
        <member name="P:webapp.Infrastructure.StateManager.Ready">
            <summary>
            Indicates if service is ready to receive external traffic.
            </summary>
        </member>
        <member name="P:webapp.Infrastructure.StateManager.Live">
            <summary>
            Indicates if service requires a restart.
            </summary>
        </member>
        <member name="T:webapp.Program">
            <summary>
            The application main object.
            </summary>
        </member>
        <member name="M:webapp.Program.Main(System.String[])">
            <summary>
            The application entry point.
            </summary>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:webapp.Program.CreateHostBuilder(System.String[])">
            <summary>
            Creates a new instance of ASP.NET core application.
            </summary>
            <param name="args">Arguments.</param>
            <returns>HostBuilder object.</returns>
        </member>
        <member name="T:webapp.Startup">
            <summary>
            Startup class.
            </summary>
        </member>
        <member name="M:webapp.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:webapp.Startup"/> class.
            </summary>
            <param name="configuration">The application configuration object.</param>
        </member>
        <member name="P:webapp.Startup.Configuration">
            <summary>
            The application configuration object.
            </summary>
        </member>
        <member name="M:webapp.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services">Services collection.</param>
        </member>
        <member name="M:webapp.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app">Builder object.</param>
            <param name="env">Environment configuration.</param>
        </member>
    </members>
</doc>
